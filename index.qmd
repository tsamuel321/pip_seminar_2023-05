---
title: "Stata and R PIP clients"
subtitle: "Accessing the World Bank's estimates of poverty and inequality"
format:
  revealjs:
    theme: dark
    slide-number: true
    chalkboard: 
      buttons: false
    # preview-links: auto
    logo: img/WB-PIP-E-horizontal-RGB-med.png
    css: 
      - css/tachyons.css
      - css/my_style.css
    footer: <https://pip.worldbank.org>
---

# The `pip` Stata client (wrapper)

## Installation

### SSC

``` stata
ssc install pip
```

<br />

### Github

``` stata
net install github, from("https://haghish.github.io/github/")  
github install worldbank/pip
```

## Installation

### SSC

``` stata
ssc install pip
```

<br />

### Github

```{r}
#| echo: false
#| cache: true
rl <- gh::gh("/repos/worldbank/pip/releases") |> 
  {\(.) .[[1]]$tag_name}()
```

``` stata
net install github, from("https://haghish.github.io/github/")  
github install worldbank/pip, version(`r rl`)
```

::: aside
-   Official website <https://worldbank.github.io/pip/>
-   Report issues at <https://github.com/worldbank/pip/issues>
:::

## Country-level estimates

``` stata
/* To query poverty at $2.15-a-day poverty line for 
all countries in all survey years*/

pip,  clear
# pip, clear country(all) year(all)  
```

![](img/pip_clear.png){fig-align="center"}

## Country-level estimates

``` stata
/* To query poverty at \$2.15-a-day poverty line 
for Morocco in 2013 */

pip, country(mar) year(2013) clear
```

![](img/pip_mar_2013.png){fig-align="center"}

## Country-level estimates

``` stata
/* For extrapolated and interpolated data that 
underpin the global and regional poverty numbers, use 
`fillgaps` option */

pip, country(mar) year(2019) clear fillgaps
```

![](img/pip_mar_2019_fillgaps.png){fig-align="center"}

## Global and regional poverty estimates

``` stata
pip wb, clear
```

![](img/pip_wb.png){.absolute top="200" left="50" height="300"}

## Global and regional poverty estimates

``` stata
pip wb, clear

/* Query a particular region or global values with `region()` */

pip wb, clear region(wld)
pip wb, clear region(lac)
```

![](img/pip_wb_lac.png){.absolute top="262" left="50" height="300"}

## Poverty lines

``` stata
/*Query poverty at other thresholds*/

pip, country(mar) year(2019) clear ///
fillgaps povline(6.85)
```

![](img/pip_mar_2019_fillgaps_685.png){fig-align="center"}

## Poverty lines

``` stata
/*Or multiple thresholds*/

pip, country(mar) year(2019) clear ///
fillgaps povline(2.15 3.65 6.85 10) 
```

![](img/pip_mar_2019_fillgaps_mpl.png){fig-align="center"}

## Data availability {.scrollable}

``` stata
pip info, clear
```

![](img/pip_info.png){fig-align="center"}

::: aside
clickable
:::

## Data availability

``` stata
pip, country(mar) year(2019) clear
```

![](img/no_data.png){fig-align="center"}

## Replicability

``` stata
pip version, clear
```

![](img/versions_prod.png){.absolute top="200" left="200" height="300"}

## Towards distributional analysis

``` stata
pip, country(mar) year(2019) clear fillgaps popshare(0.5)
```

![](img/pip_mar_2019_fillgaps_popsahre05.png){fig-align="center"}

## Towards distributional analysis {auto-animate="true"}

``` stata
numlist ".3(.1).8"
pip, country(mar) year(2019) clear fillgaps ///
    popshare(`r(numlist)') n2disp(6)
```

![](img/pip_mar_2019_fillgaps_popsahre_mps.png){fig-align="center"}

## Towards distributional analysis {auto-animate="true"}

``` stata
numlist ".3(.1).8"
pip, country(mar) year(2019) clear fillgaps ///
    popshare(`r(numlist)') n2disp(6)
```

![](img/pip_mar_2019_fillgaps_popsahre_mps.png){fig-align="center"}

::: {style="text-align: center; margin-top: 1em"}
[PIP Percentiles data](https://datacatalog.worldbank.org/search/dataset/0063646/_poverty_and_inequality_platform_pip_percentiles){style="text-align: center"}
:::

## Auxiliary Data {.scrollable}

``` stata
pip tables, clear
```

![](img/aux_data.png){fig-align="center"}

Alternatively

``` stata
pip tables, table(cpi) clear

pip tables, table(interpolated_means) clear
```

## Help file

::: r-stack
![](img/help1.png){.fragment .fade-in-then-semi-out}

![](img/help2.png){.absolute .fragment .fade-in-then-semi-out top="0" left="0"}

![](img/help3.png){.absolute .fragment .fade-in-then-semi-out top="100" left="500"}

![](img/help4.png){.absolute .fragment .fade-in-then-semi-out top="200" left="-100"}

![](img/help5.png){.absolute .fragment .fade-in-then-semi-out top="250" left="200"}

![](img/help6_1.png){.absolute .fragment .fade-in-then-semi-out top="0" left="500"}

![](img/help6_2.png){.absolute .fragment .fade-in-then-semi-out top="0" left="500"}

![](img/help6_3.png){.absolute .fragment .fade-in-then-semi-out top="0" left="500"}

![](img/help7_1.png){.absolute .fragment .fade-in-then-semi-out top="50" left="-100"}

![](img/help7_2.png){.absolute .fragment .fade-in-then-semi-out top="50" left="-100"}

![](img/help8.png){.absolute .fragment .fade-in-then-out .grow top="0" left="150"}
:::

# R Client (wrapper)

```{r}
#| echo: false
#| cache: false
#library(pipr)
library(tidyverse)
library(ggthemes)
```

## Installation

``` r
# install.packages("devtools")
devtools::install_github("worldbank/pipr")
```

## Webpage

::: {style="text-align: center; margin-top: 5em"}
[https://worldbank.github.io/pipr/](https://worldbank.github.io/pipr/){.f1 style="text-align: center"}
:::

## Country-level estimates

```{r}
#| echo: true
pipr::get_stats() |> 
  select(c(country_code, year, poverty_line, headcount))
```

## Country-level estimates

```{r}
#| echo: true
pipr::get_stats(country = "MAR") |> 
  select(c(country_code, year, poverty_line, headcount))
```

## Country-level estimates

```{r}
#| echo: true
pipr::get_stats(country = c("COL", "MAR")) |> 
  arrange(year) |> 
  select(c(country_code, year, poverty_line, headcount))
```

## Country-level estimates

```{r}
#| echo: true
pipr::get_stats(country = "COL", year = c(2012, 2018))  |> 
  select(c(country_code, year, poverty_line, headcount))
```

## Interporlated and Extrapolated values {auto-animate="true"}

```{r}
#| echo: true
pipr::get_stats(country = "HTI")  |> 
  select(c(country_code, year, poverty_line, headcount))
```

## Interporlated and Extrapolated values {auto-animate="true"}

```{r}
#| echo: true
pipr::get_stats(country = "HTI", fill_gaps = TRUE)   |> 
  select(c(country_code, year, poverty_line, headcount))
```

## Poverty line

```{r}
#| echo: true
pipr::get_stats(country = "COL", povline = 3)  |> 
  select(c(country_code, year, poverty_line, headcount))
```

## Multiple Poverty lines

```{r}
#| echo: true


povlines <- c(2, 4, 6, 10)
map_df(.x      = povlines, 
       .f      = pipr::get_stats, 
       country = "COL",
       year    = 2012) |> 
  select(c(country_code, year, poverty_line, headcount))

```

## Global estimates

```{r}
#| echo: true
pipr::get_wb()  |> 
  arrange(year) |> 
  select(c(region_code, year, poverty_line, headcount))

```

## Many more functions

![](img/pipr_functions.png){fig-align="center"}

------------------------------------------------------------------------

::: panel-tabset
### Code

```{r}
#| echo: true

# Global poverty trends 1990-2019
df <- pipr::get_wb() |>
  filter(year > 1989, region_code == "WLD") |>
  mutate(
    pop_in_poverty = round(pop_in_poverty / 1000000, 0),
    headcount = round(headcount, 3)
  )

headcount_col <- "#E69F00"

gr <- ggplot(df, aes(x = year)) +
  geom_text(aes(label = headcount * 100, 
                y     = headcount), 
            vjust   = 1, 
            nudge_y = -0.02, 
            color   = headcount_col) +
  geom_text(aes(label = pop_in_poverty, 
                y     = pop_in_poverty / 5000), 
            vjust   = 0, 
            nudge_y = 0.02) +
  geom_line(aes(y  = headcount), color = headcount_col) +
  geom_line(aes(y  = pop_in_poverty / 5000)) +
  geom_point(aes(y = headcount), color = headcount_col) +
  geom_point(aes(y = pop_in_poverty / 5000)) +
  scale_y_continuous(
    labels = scales::percent,
    limits = c(0, 0.5),
    breaks = c(0, 0.1, 0.2, 0.3, 0.4),
    sec.axis = sec_axis(~.*5000, name = "Number of poor (million)",
                        breaks = c(0, 500, 1000, 1500, 2000))) +
  labs(
    title = "Global poverty trends 1990-2019",
    y = "Poverty rate (%)",
    x = ""
  ) +
  theme_classic()
```

### plot

```{r}
#| fig-width: 10
#| fig-height: 6
gr
```
:::

------------------------------------------------------------------------

::: panel-tabset
### Code

```{r}
#| echo: true

# Number of poor by region
df <- pipr::get_wb() |>
  filter(year > 1989 & year < 2019) |>
  mutate(
    pop_in_poverty = round(pop_in_poverty / 1000000, 0),
    headcount = round(headcount, 3)
  )

regions <- df |>
  filter(!region_code %in% c("WLD", "AFE", "AFW")) |>
  mutate(
    region_name = fct_relevel(region_name,
                               c("Other high Income",
                                 "Europe and Central Asia",
                                 "Middle East and North Africa",
                                 "Latin America and the Caribbean",
                                 "East Asia and Pacific",
                                 "South Asia",
                                 "Sub-Saharan Africa"
                                 ))
  )

world <- df |>
  filter(region_code == "WLD")

gr2 <- ggplot(regions, aes(y = pop_in_poverty, 
                           x = year, 
                           fill = region_name)) +
  geom_area() +
  scale_y_continuous(
    limits = c(0, 2000),
    breaks = c(0, 500, 1000, 1500, 2000)
  ) +
  scale_fill_tableau(palette = "Tableau 10") +
  labs(
    title = "Number of poor by region",
    y = "Number of poor (million)",
    x = ""
  ) +
  theme_classic() +
  theme(
    legend.position = "bottom"
  ) +
  geom_line(data = world, 
            size = rel(1.5), 
            alpha =.5, 
            linetype = "longdash")
```

### plot

```{r}
#| fig-width: 10
#| fig-height: 6
gr2
```
:::

# Thanks.
